import streamlit as st
import time
from supervisor_ndt import supervisor, AGENT_DESCRIPTIONS, domains_info

st.set_page_config(layout="wide")

# Custom CSS for styling
st.markdown("""
<style>
    .sidebar .element-container {
        word-wrap: break-word;
    }
    .stButton > button {
        width: 100%;
    }
</style>
""", unsafe_allow_html=True)

st.title("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä –∑–∞–¥–∞—á")

# –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
st.write("""
–≠—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä–∞ –∏ –∞–≥–µ–Ω—Ç–æ–≤ –Ω–∞ –±–∞–∑–µ –º–æ–¥–µ–ª–∏ llama-3.1 8b. 
–û–Ω–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å, –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–æ–º–µ–Ω –∑–Ω–∞–Ω–∏–π, –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç.
""")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–Ω–∞—á–∫–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤
def create_agent_badges():
    cols = st.columns(len(AGENT_DESCRIPTIONS))
    badges = {}
    for i, (agent, info) in enumerate(AGENT_DESCRIPTIONS.items()):
        with cols[i]:
            badges[agent] = st.empty()
    return badges


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–∫–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤
def update_agent_badges(badges, active_agent=None):
    for agent, badge in badges.items():
        color = "green" if agent == active_agent else "gray"
        badge.markdown(f"<h3 style='text-align: center; color: {color};'>{agent}</h3>", unsafe_allow_html=True)


# –°–æ–∑–¥–∞–µ–º –∑–Ω–∞—á–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤
agent_badges = create_agent_badges()

# Initialize session state for task if it doesn't exist
if 'task' not in st.session_state:
    st.session_state.task = ""

# User input with search icon
task = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É:", value=st.session_state.task, placeholder="üîç –ü–æ–∏—Å–∫...")

# Example tasks as suggestions
st.write("–ü—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á:")
example_tasks = [
    "–°–∫–æ–ª—å–∫–æ –º–∞—à–∏–Ω–æ–º–µ—Å—Ç –≤ –ø–∞—Ä–∫–∏–Ω–≥–µ –ñ–ö 1 –ò–∑–º–∞–π–ª–æ–≤—Å–∫–∏–π?",
    "–†–∞–∑–º–µ—Ä –æ–∫–æ–Ω –≤ –ñ–ö 1 –ò–∑–º–∞–π–ª–æ–≤—Å–∫–∏–π?",
    "–ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è –ª–∏—á–Ω—ã–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º –¥–æ 1 –ò–∑–º–∞–π–ª–æ–≤—Å–∫–∏–π?",
    "–ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º –¥–æ 1-–≥–æ –ò–∑–º–∞–π–ª–æ–≤—Å–∫–æ–≥–æ?",
    "–ï—Å—Ç—å –ª–∏ –ø–æ–¥–∑–µ–º–Ω—ã–π –ø–∞—Ä–∫–∏–Ω–≥ –≤ 1 –ò–∑–º–∞–π–ª–æ–≤—Å–∫–æ–º?",
    "–ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è –Ω–∞ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ –¥–æ –ñ–ö 1–π –î–æ–Ω—Å–∫–æ–π?",
    "–°—Ä–æ–∫–∏ —Å–¥–∞—á–∏ –ê–º–±–µ—Ä –°–∏—Ç–∏?",
    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∫–æ–≤–æ—á–Ω—ã—Ö –º–µ—Å—Ç –≤ –ê–º–±–µ—Ä?",
    "–ö–æ–≥–¥–∞ –≤—ã–¥–∞—é—Ç –∫–ª—é—á–∏ –≤ –ê–º–±–µ—Ä?",
    "–ê–¥—Ä–µ—Å –ñ–ö –ê–º–±–µ—Ä –°–∏—Ç–∏?",
    "–ö–∞–∫–æ–π –∫–ª–∞—Å—Å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –≤ –ñ–ö 1 –Æ–∂–Ω—ã–π?",
    "–û–∫—Ä—É–∂–µ–Ω–∏–µ –ñ–ö 1 –Æ–∂–Ω—ã–π?",
    "–°–∫–æ–ª—å–∫–æ –∫–º –æ—Ç –ú–ö–ê–î –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ê–º–±–µ—Ä –°–∏—Ç–∏?",
    "–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ê–º–±–µ—Ä –æ—Ç –¢–¢–ö?"
]
cols = st.columns(3)  # –†–∞–∑–¥–µ–ª–∏–º –Ω–∞ 3 –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
for i, example_task in enumerate(example_tasks):
    if cols[i % 3].button(example_task, key=example_task):
        st.session_state.task = example_task
        st.rerun()

# –ó–µ–ª–µ–Ω–∞—è –∫–Ω–æ–ø–∫–∞ "–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É"
if st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É", type="primary"):
    if task:
        # Placeholder for results
        domain_selection = st.empty()
        router_analysis = st.empty()
        rag_execution = st.empty()
        response_generation = st.empty()
        final_result = st.empty()

        # Execute the task step by step
        try:
            # –®–∞–≥ 1: –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è
            update_agent_badges(agent_badges, "RouterAgent")
            router_result = supervisor.agents['RouterAgent'].process({"query": task})
            domain_selection.subheader(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –¥–æ–º–µ–Ω –∑–Ω–∞–Ω–∏–π: {router_result['domain_name']}")

            with router_analysis.expander("–î–µ—Ç–∞–ª–∏ –∞–Ω–∞–ª–∏–∑–∞ –∏ –≤—ã–±–æ—Ä–∞ –¥–æ–º–µ–Ω–∞", expanded=False):
                st.json(router_result)
            time.sleep(1)

            # –®–∞–≥ 2: RAG –∑–∞–ø—Ä–æ—Å
            update_agent_badges(agent_badges, "RAGAgent")
            rag_result = supervisor.agents['RAGAgent'].process({
                "chat_id": router_result['chat_id'],
                "query": task
            })
            with rag_execution.expander("–î–µ—Ç–∞–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è RAG –∑–∞–ø—Ä–æ—Å–∞", expanded=False):
                st.json(rag_result)
            time.sleep(1)

            # –®–∞–≥ 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
            update_agent_badges(agent_badges, "ResponseGenerator")
            response = supervisor.agents["ResponseGenerator"].process({
                "rag_response": rag_result
            })
            with response_generation.expander("–î–µ—Ç–∞–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞", expanded=False):
                st.json(response)
            time.sleep(1)

            # –®–∞–≥ 4: –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            final_result.subheader("–§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            final_result.write(response['result'])

            # –°–±—Ä–æ—Å –∑–Ω–∞—á–∫–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤
            update_agent_badges(agent_badges)

        except Exception as e:
            st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {str(e)}")

# Left Sidebar content
with st.sidebar:
    with st.expander("–°—Ö–µ–º–∞ –∞–≥–µ–Ω—Ç–æ–≤", expanded=False):
        agent_diagram = """
        digraph G {
            bgcolor="transparent";
            node [shape=rect, style="filled,rounded", fontname="Arial", fontcolor="white", color="#2a2a2a", fontsize=14];
            edge [color="#4a4a4a", penwidth=1.5];

            Supervisor [label="Supervisor", fillcolor="#FF69B4"];
            Router [label="Router Agent", fillcolor="#FFA500"];
            RAG [label="RAG Agent", fillcolor="#4682B4"];
            RG [label="Response Generator", fillcolor="#FFA07A"];
            KB [label="Knowledge Base", shape=cylinder, fillcolor="#8A2BE2"];

            Supervisor -> Router [label="1. –ó–∞–ø—Ä–æ—Å"];
            Router -> Supervisor [label="2. –í—ã–±–æ—Ä –¥–æ–º–µ–Ω–∞"];
            Supervisor -> RAG [label="3. –ó–∞–ø—Ä–æ—Å –∫ –¥–æ–º–µ–Ω—É"];
            RAG -> KB [label="4. –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"];
            KB -> RAG [label="5. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞"];
            RAG -> Supervisor [label="6. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã RAG"];
            Supervisor -> RG [label="7. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞"];
            RG -> Supervisor [label="8. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"];
        }
        """
        st.graphviz_chart(agent_diagram)

    with st.expander("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≥–µ–Ω—Ç–∞—Ö", expanded=False):
        for agent, info in AGENT_DESCRIPTIONS.items():
            st.subheader(agent)
            st.write(f"**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:** {info['capabilities']}")
            st.write(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {info['description']}")
            st.write("---")

    with st.expander("–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–º–µ–Ω—ã –∑–Ω–∞–Ω–∏–π", expanded=False):
        for domain in domains_info:
            st.write(f"‚Ä¢ {domain['domain_name']}")

    with st.expander("–û —Å–∏—Å—Ç–µ–º–µ", expanded=False):
        st.write("""
        –≠—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:

        - RouterAgent –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–æ–º–µ–Ω –∑–Ω–∞–Ω–∏–π
        - RAGAgent –∏—â–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –¥–æ–º–µ–Ω–µ –∑–Ω–∞–Ω–∏–π
        - ResponseGenerator —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–Ω—è—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

        –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à—É –∑–∞–¥–∞—á—É, –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–æ–º–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç.
        """)